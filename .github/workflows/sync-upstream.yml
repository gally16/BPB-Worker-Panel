# 工作流的名称
name: Sync Upstream Fork

# 触发工作流的事件
on:
  # 允许你手动在 Actions 页面触发此工作流
  workflow_dispatch:
  
  # 定时任务：使用 CRON 表达式，这里代表每天的零点执行
  schedule:
    - cron: '0 0 * * *'

# 定义一个或多个作业（job）
jobs:
  sync:
    # 作业运行的环境
    runs-on: ubuntu-latest

    # !!! 核心修改：在这里为作业授予权限 !!!
    #permissions:
    #  contents: write  # 授予向仓库推送内容的权限
    #  workflows: write # 授予修改工作流文件的权限

    # 作业的步骤
    steps:
      # 第一步：检出（checkout）你的仓库代码
      # 更新到了最新的 v4 版本
      - name: Checkout Fork
        uses: actions/checkout@v4
        with:
          # 为了后续能够 push 代码，需要一个有写权限的 token
          # GITHUB_TOKEN 在添加了上面的 permissions 后，就会自动获得所需权限
          token: ${{ secrets.GITHUB_TOKEN }}
          # 获取所有历史记录，以便进行 rebase 或 merge
          fetch-depth: 0 

      # 第二步：设置上游（Upstream）仓库并同步
      - name: Sync with Upstream
        run: |
          # 设置 Git 的用户信息，这样提交记录会显示是由 action 完成的
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # 添加原始仓库（上游仓库）的远程地址
          git remote add upstream https://github.com/bia-pain-bache/BPB-Worker-Panel.git
          
          # 从上游仓库获取所有分支的最新内容
          git fetch upstream
          
          # 切换到你想要同步的分支，通常是 main
          git checkout main
          
          # 将上游仓库的更新合并到你的分支
          git rebase upstream/main
          
          # 将同步后的代码强制推送到你的 GitHub 仓库
          git push origin main --force
